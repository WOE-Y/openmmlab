{"env_info": "sys.platform: linux\nPython: 3.8.8 (default, Feb 24 2021, 21:46:12) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: NVIDIA GeForce RTX 3090\nCUDA_HOME: /home/yangziqi/.conda/envs/openmmlab\nNVCC: Cuda compilation tools, release 11.6, V11.6.124\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '../../ballon'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../balloon/train.json',\n        img_prefix='../balloon/train/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../balloon/val.json',\n        img_prefix='../balloon/val/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../balloon/val.json',\n        img_prefix='../balloon/val/',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(interval=10)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = 'work/mask_rcnn_balloon'\ngpu_ids = [0]\nauto_resume = False\n", "seed": 452776697, "exp_name": "mask_rcnn_r50_fpn_1x_coco.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.0015, "bbox_mAP": 0.0544, "bbox_mAP_50": 0.1066, "bbox_mAP_75": 0.0521, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1841, "bbox_mAP_l": 0.0413, "bbox_mAP_copypaste": "0.0544 0.1066 0.0521 0.0000 0.1841 0.0413", "segm_mAP": 0.0738, "segm_mAP_50": 0.1097, "segm_mAP_75": 0.0784, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1248, "segm_mAP_l": 0.0748, "segm_mAP_copypaste": "0.0738 0.1097 0.0784 0.0000 0.1248 0.0748"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.0031, "bbox_mAP": 0.0762, "bbox_mAP_50": 0.1886, "bbox_mAP_75": 0.0273, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.2149, "bbox_mAP_l": 0.0857, "bbox_mAP_copypaste": "0.0762 0.1886 0.0273 0.0000 0.2149 0.0857", "segm_mAP": 0.1111, "segm_mAP_50": 0.1893, "segm_mAP_75": 0.1332, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0659, "segm_mAP_l": 0.1339, "segm_mAP_copypaste": "0.1111 0.1893 0.1332 0.0000 0.0659 0.1339"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0047, "bbox_mAP": 0.325, "bbox_mAP_50": 0.5879, "bbox_mAP_75": 0.4077, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.237, "bbox_mAP_l": 0.377, "bbox_mAP_copypaste": "0.3250 0.5879 0.4077 0.0000 0.2370 0.3770", "segm_mAP": 0.4047, "segm_mAP_50": 0.5947, "segm_mAP_75": 0.494, "segm_mAP_s": 0.0, "segm_mAP_m": 0.2549, "segm_mAP_l": 0.4777, "segm_mAP_copypaste": "0.4047 0.5947 0.4940 0.0000 0.2549 0.4777"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00629, "bbox_mAP": 0.4032, "bbox_mAP_50": 0.613, "bbox_mAP_75": 0.5259, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3941, "bbox_mAP_l": 0.461, "bbox_mAP_copypaste": "0.4032 0.6130 0.5259 0.0000 0.3941 0.4610", "segm_mAP": 0.5018, "segm_mAP_50": 0.6098, "segm_mAP_75": 0.5767, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4336, "segm_mAP_l": 0.5798, "segm_mAP_copypaste": "0.5018 0.6098 0.5767 0.0000 0.4336 0.5798"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00789, "bbox_mAP": 0.5482, "bbox_mAP_50": 0.7585, "bbox_mAP_75": 0.6156, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4793, "bbox_mAP_l": 0.6081, "bbox_mAP_copypaste": "0.5482 0.7585 0.6156 0.0000 0.4793 0.6081", "segm_mAP": 0.6337, "segm_mAP_50": 0.761, "segm_mAP_75": 0.7152, "segm_mAP_s": 0.0072, "segm_mAP_m": 0.5047, "segm_mAP_l": 0.7075, "segm_mAP_copypaste": "0.6337 0.7610 0.7152 0.0072 0.5047 0.7075"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00949, "bbox_mAP": 0.5071, "bbox_mAP_50": 0.7268, "bbox_mAP_75": 0.6804, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3774, "bbox_mAP_l": 0.5873, "bbox_mAP_copypaste": "0.5071 0.7268 0.6804 0.0000 0.3774 0.5873", "segm_mAP": 0.5742, "segm_mAP_50": 0.7183, "segm_mAP_75": 0.6465, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3609, "segm_mAP_l": 0.6729, "segm_mAP_copypaste": "0.5742 0.7183 0.6465 0.0000 0.3609 0.6729"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.01109, "bbox_mAP": 0.5559, "bbox_mAP_50": 0.7396, "bbox_mAP_75": 0.6437, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4165, "bbox_mAP_l": 0.6325, "bbox_mAP_copypaste": "0.5559 0.7396 0.6437 0.0000 0.4165 0.6325", "segm_mAP": 0.6142, "segm_mAP_50": 0.7458, "segm_mAP_75": 0.688, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.3837, "segm_mAP_l": 0.7135, "segm_mAP_copypaste": "0.6142 0.7458 0.6880 0.0168 0.3837 0.7135"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.01269, "bbox_mAP": 0.6237, "bbox_mAP_50": 0.7826, "bbox_mAP_75": 0.7044, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.4233, "bbox_mAP_l": 0.7102, "bbox_mAP_copypaste": "0.6237 0.7826 0.7044 0.0505 0.4233 0.7102", "segm_mAP": 0.6814, "segm_mAP_50": 0.7826, "segm_mAP_75": 0.7489, "segm_mAP_s": 0.101, "segm_mAP_m": 0.3744, "segm_mAP_l": 0.7863, "segm_mAP_copypaste": "0.6814 0.7826 0.7489 0.1010 0.3744 0.7863"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00143, "bbox_mAP": 0.6275, "bbox_mAP_50": 0.7975, "bbox_mAP_75": 0.7402, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.4446, "bbox_mAP_l": 0.7097, "bbox_mAP_copypaste": "0.6275 0.7975 0.7402 0.0505 0.4446 0.7097", "segm_mAP": 0.6901, "segm_mAP_50": 0.7975, "segm_mAP_75": 0.7824, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4164, "segm_mAP_l": 0.7902, "segm_mAP_copypaste": "0.6901 0.7975 0.7824 0.0505 0.4164 0.7902"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00159, "bbox_mAP": 0.6402, "bbox_mAP_50": 0.7899, "bbox_mAP_75": 0.7351, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.4435, "bbox_mAP_l": 0.731, "bbox_mAP_copypaste": "0.6402 0.7899 0.7351 0.0505 0.4435 0.7310", "segm_mAP": 0.6774, "segm_mAP_50": 0.7815, "segm_mAP_75": 0.7678, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4129, "segm_mAP_l": 0.785, "segm_mAP_copypaste": "0.6774 0.7815 0.7678 0.0505 0.4129 0.7850"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00175, "bbox_mAP": 0.6398, "bbox_mAP_50": 0.7653, "bbox_mAP_75": 0.7244, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4152, "bbox_mAP_l": 0.7403, "bbox_mAP_copypaste": "0.6398 0.7653 0.7244 0.0000 0.4152 0.7403", "segm_mAP": 0.6783, "segm_mAP_50": 0.7697, "segm_mAP_75": 0.7574, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.3935, "segm_mAP_l": 0.7903, "segm_mAP_copypaste": "0.6783 0.7697 0.7574 0.0505 0.3935 0.7903"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00019, "bbox_mAP": 0.6499, "bbox_mAP_50": 0.7699, "bbox_mAP_75": 0.7291, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4323, "bbox_mAP_l": 0.751, "bbox_mAP_copypaste": "0.6499 0.7699 0.7291 0.0000 0.4323 0.7510", "segm_mAP": 0.6852, "segm_mAP_50": 0.7743, "segm_mAP_75": 0.7619, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4149, "segm_mAP_l": 0.7974, "segm_mAP_copypaste": "0.6852 0.7743 0.7619 0.0505 0.4149 0.7974"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.00021, "bbox_mAP": 0.6497, "bbox_mAP_50": 0.7728, "bbox_mAP_75": 0.731, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4468, "bbox_mAP_l": 0.7473, "bbox_mAP_copypaste": "0.6497 0.7728 0.7310 0.0000 0.4468 0.7473", "segm_mAP": 0.6845, "segm_mAP_50": 0.777, "segm_mAP_75": 0.7648, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4135, "segm_mAP_l": 0.7951, "segm_mAP_copypaste": "0.6845 0.7770 0.7648 0.0505 0.4135 0.7951"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.00022, "bbox_mAP": 0.6442, "bbox_mAP_50": 0.7681, "bbox_mAP_75": 0.7216, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4468, "bbox_mAP_l": 0.738, "bbox_mAP_copypaste": "0.6442 0.7681 0.7216 0.0000 0.4468 0.7380", "segm_mAP": 0.6853, "segm_mAP_50": 0.7806, "segm_mAP_75": 0.7681, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4135, "segm_mAP_l": 0.7939, "segm_mAP_copypaste": "0.6853 0.7806 0.7681 0.0505 0.4135 0.7939"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.00024, "bbox_mAP": 0.6468, "bbox_mAP_50": 0.7664, "bbox_mAP_75": 0.7192, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4481, "bbox_mAP_l": 0.7415, "bbox_mAP_copypaste": "0.6468 0.7664 0.7192 0.0000 0.4481 0.7415", "segm_mAP": 0.6854, "segm_mAP_50": 0.7963, "segm_mAP_75": 0.7664, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4155, "segm_mAP_l": 0.7952, "segm_mAP_copypaste": "0.6854 0.7963 0.7664 0.0505 0.4155 0.7952"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.00025, "bbox_mAP": 0.6449, "bbox_mAP_50": 0.7798, "bbox_mAP_75": 0.7102, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4468, "bbox_mAP_l": 0.7376, "bbox_mAP_copypaste": "0.6449 0.7798 0.7102 0.0000 0.4468 0.7376", "segm_mAP": 0.6798, "segm_mAP_50": 0.8032, "segm_mAP_75": 0.7463, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4168, "segm_mAP_l": 0.7849, "segm_mAP_copypaste": "0.6798 0.8032 0.7463 0.0505 0.4168 0.7849"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.00027, "bbox_mAP": 0.6508, "bbox_mAP_50": 0.7824, "bbox_mAP_75": 0.7127, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4451, "bbox_mAP_l": 0.7438, "bbox_mAP_copypaste": "0.6508 0.7824 0.7127 0.0000 0.4451 0.7438", "segm_mAP": 0.6836, "segm_mAP_50": 0.8065, "segm_mAP_75": 0.7487, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.418, "segm_mAP_l": 0.7879, "segm_mAP_copypaste": "0.6836 0.8065 0.7487 0.0505 0.4180 0.7879"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.00029, "bbox_mAP": 0.6522, "bbox_mAP_50": 0.784, "bbox_mAP_75": 0.7141, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4375, "bbox_mAP_l": 0.7454, "bbox_mAP_copypaste": "0.6522 0.7840 0.7141 0.0000 0.4375 0.7454", "segm_mAP": 0.6855, "segm_mAP_50": 0.8088, "segm_mAP_75": 0.7513, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4172, "segm_mAP_l": 0.7899, "segm_mAP_copypaste": "0.6855 0.8088 0.7513 0.0505 0.4172 0.7899"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.0003, "bbox_mAP": 0.6474, "bbox_mAP_50": 0.7848, "bbox_mAP_75": 0.7148, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4464, "bbox_mAP_l": 0.7388, "bbox_mAP_copypaste": "0.6474 0.7848 0.7148 0.0000 0.4464 0.7388", "segm_mAP": 0.6868, "segm_mAP_50": 0.8097, "segm_mAP_75": 0.7522, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4185, "segm_mAP_l": 0.7899, "segm_mAP_copypaste": "0.6868 0.8097 0.7522 0.0505 0.4185 0.7899"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.00032, "bbox_mAP": 0.6553, "bbox_mAP_50": 0.777, "bbox_mAP_75": 0.7295, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4464, "bbox_mAP_l": 0.7457, "bbox_mAP_copypaste": "0.6553 0.7770 0.7295 0.0000 0.4464 0.7457", "segm_mAP": 0.6968, "segm_mAP_50": 0.8104, "segm_mAP_75": 0.777, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4185, "segm_mAP_l": 0.8028, "segm_mAP_copypaste": "0.6968 0.8104 0.7770 0.0505 0.4185 0.8028"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.00033, "bbox_mAP": 0.648, "bbox_mAP_50": 0.7751, "bbox_mAP_75": 0.7283, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4464, "bbox_mAP_l": 0.7377, "bbox_mAP_copypaste": "0.6480 0.7751 0.7283 0.0000 0.4464 0.7377", "segm_mAP": 0.6929, "segm_mAP_50": 0.8093, "segm_mAP_75": 0.7568, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4172, "segm_mAP_l": 0.7998, "segm_mAP_copypaste": "0.6929 0.8093 0.7568 0.0505 0.4172 0.7998"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.00035, "bbox_mAP": 0.6525, "bbox_mAP_50": 0.774, "bbox_mAP_75": 0.7275, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4464, "bbox_mAP_l": 0.743, "bbox_mAP_copypaste": "0.6525 0.7740 0.7275 0.0000 0.4464 0.7430", "segm_mAP": 0.6922, "segm_mAP_50": 0.8081, "segm_mAP_75": 0.7562, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4172, "segm_mAP_l": 0.7989, "segm_mAP_copypaste": "0.6922 0.8081 0.7562 0.0505 0.4172 0.7989"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 0.00037, "bbox_mAP": 0.6501, "bbox_mAP_50": 0.7729, "bbox_mAP_75": 0.726, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4407, "bbox_mAP_l": 0.7428, "bbox_mAP_copypaste": "0.6501 0.7729 0.7260 0.0000 0.4407 0.7428", "segm_mAP": 0.6912, "segm_mAP_50": 0.8068, "segm_mAP_75": 0.7543, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4154, "segm_mAP_l": 0.7991, "segm_mAP_copypaste": "0.6912 0.8068 0.7543 0.0505 0.4154 0.7991"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 0.00038, "bbox_mAP": 0.6521, "bbox_mAP_50": 0.7726, "bbox_mAP_75": 0.7265, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4524, "bbox_mAP_l": 0.7436, "bbox_mAP_copypaste": "0.6521 0.7726 0.7265 0.0000 0.4524 0.7436", "segm_mAP": 0.6918, "segm_mAP_50": 0.8066, "segm_mAP_75": 0.7542, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4194, "segm_mAP_l": 0.7999, "segm_mAP_copypaste": "0.6918 0.8066 0.7542 0.0505 0.4194 0.7999"}
{"mode": "val", "epoch": 25, "iter": 13, "lr": 0.0004, "bbox_mAP": 0.6551, "bbox_mAP_50": 0.7774, "bbox_mAP_75": 0.7302, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4626, "bbox_mAP_l": 0.7446, "bbox_mAP_copypaste": "0.6551 0.7774 0.7302 0.0000 0.4626 0.7446", "segm_mAP": 0.694, "segm_mAP_50": 0.8117, "segm_mAP_75": 0.7495, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4273, "segm_mAP_l": 0.8023, "segm_mAP_copypaste": "0.6940 0.8117 0.7495 0.0505 0.4273 0.8023"}
{"mode": "val", "epoch": 26, "iter": 13, "lr": 0.00041, "bbox_mAP": 0.6528, "bbox_mAP_50": 0.7775, "bbox_mAP_75": 0.7307, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4615, "bbox_mAP_l": 0.7413, "bbox_mAP_copypaste": "0.6528 0.7775 0.7307 0.0000 0.4615 0.7413", "segm_mAP": 0.6959, "segm_mAP_50": 0.8119, "segm_mAP_75": 0.7499, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4321, "segm_mAP_l": 0.8015, "segm_mAP_copypaste": "0.6959 0.8119 0.7499 0.0505 0.4321 0.8015"}
{"mode": "val", "epoch": 27, "iter": 13, "lr": 0.00043, "bbox_mAP": 0.6534, "bbox_mAP_50": 0.774, "bbox_mAP_75": 0.7285, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4574, "bbox_mAP_l": 0.7433, "bbox_mAP_copypaste": "0.6534 0.7740 0.7285 0.0000 0.4574 0.7433", "segm_mAP": 0.6935, "segm_mAP_50": 0.8087, "segm_mAP_75": 0.7473, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4195, "segm_mAP_l": 0.8007, "segm_mAP_copypaste": "0.6935 0.8087 0.7473 0.0505 0.4195 0.8007"}
{"mode": "val", "epoch": 28, "iter": 13, "lr": 0.00045, "bbox_mAP": 0.6545, "bbox_mAP_50": 0.7743, "bbox_mAP_75": 0.7284, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.451, "bbox_mAP_l": 0.7449, "bbox_mAP_copypaste": "0.6545 0.7743 0.7284 0.0000 0.4510 0.7449", "segm_mAP": 0.6937, "segm_mAP_50": 0.809, "segm_mAP_75": 0.7473, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4263, "segm_mAP_l": 0.7999, "segm_mAP_copypaste": "0.6937 0.8090 0.7473 0.0505 0.4263 0.7999"}
{"mode": "val", "epoch": 29, "iter": 13, "lr": 0.00046, "bbox_mAP": 0.6634, "bbox_mAP_50": 0.7778, "bbox_mAP_75": 0.7314, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4615, "bbox_mAP_l": 0.754, "bbox_mAP_copypaste": "0.6634 0.7778 0.7314 0.0000 0.4615 0.7540", "segm_mAP": 0.6977, "segm_mAP_50": 0.8131, "segm_mAP_75": 0.7507, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4274, "segm_mAP_l": 0.8045, "segm_mAP_copypaste": "0.6977 0.8131 0.7507 0.0505 0.4274 0.8045"}
{"mode": "val", "epoch": 30, "iter": 13, "lr": 0.00048, "bbox_mAP": 0.6617, "bbox_mAP_50": 0.7766, "bbox_mAP_75": 0.7305, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4601, "bbox_mAP_l": 0.7523, "bbox_mAP_copypaste": "0.6617 0.7766 0.7305 0.0000 0.4601 0.7523", "segm_mAP": 0.696, "segm_mAP_50": 0.8117, "segm_mAP_75": 0.7493, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4261, "segm_mAP_l": 0.8038, "segm_mAP_copypaste": "0.6960 0.8117 0.7493 0.0505 0.4261 0.8038"}
{"mode": "val", "epoch": 31, "iter": 13, "lr": 0.00049, "bbox_mAP": 0.6597, "bbox_mAP_50": 0.7762, "bbox_mAP_75": 0.7303, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.456, "bbox_mAP_l": 0.7499, "bbox_mAP_copypaste": "0.6597 0.7762 0.7303 0.0000 0.4560 0.7499", "segm_mAP": 0.6963, "segm_mAP_50": 0.8107, "segm_mAP_75": 0.749, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4263, "segm_mAP_l": 0.8041, "segm_mAP_copypaste": "0.6963 0.8107 0.7490 0.0505 0.4263 0.8041"}
{"mode": "val", "epoch": 32, "iter": 13, "lr": 0.00051, "bbox_mAP": 0.6559, "bbox_mAP_50": 0.7761, "bbox_mAP_75": 0.7308, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.451, "bbox_mAP_l": 0.7485, "bbox_mAP_copypaste": "0.6559 0.7761 0.7308 0.0000 0.4510 0.7485", "segm_mAP": 0.696, "segm_mAP_50": 0.8113, "segm_mAP_75": 0.7496, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4327, "segm_mAP_l": 0.8024, "segm_mAP_copypaste": "0.6960 0.8113 0.7496 0.0505 0.4327 0.8024"}
{"mode": "val", "epoch": 33, "iter": 13, "lr": 0.00053, "bbox_mAP": 0.6552, "bbox_mAP_50": 0.7767, "bbox_mAP_75": 0.7311, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.451, "bbox_mAP_l": 0.7455, "bbox_mAP_copypaste": "0.6552 0.7767 0.7311 0.0000 0.4510 0.7455", "segm_mAP": 0.6941, "segm_mAP_50": 0.8129, "segm_mAP_75": 0.75, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4316, "segm_mAP_l": 0.798, "segm_mAP_copypaste": "0.6941 0.8129 0.7500 0.0505 0.4316 0.7980"}
{"mode": "val", "epoch": 34, "iter": 13, "lr": 0.00054, "bbox_mAP": 0.653, "bbox_mAP_50": 0.7767, "bbox_mAP_75": 0.7313, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4526, "bbox_mAP_l": 0.7434, "bbox_mAP_copypaste": "0.6530 0.7767 0.7313 0.0000 0.4526 0.7434", "segm_mAP": 0.6938, "segm_mAP_50": 0.8116, "segm_mAP_75": 0.7497, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4327, "segm_mAP_l": 0.7982, "segm_mAP_copypaste": "0.6938 0.8116 0.7497 0.0505 0.4327 0.7982"}
{"mode": "val", "epoch": 35, "iter": 13, "lr": 0.00056, "bbox_mAP": 0.6544, "bbox_mAP_50": 0.7777, "bbox_mAP_75": 0.7324, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.454, "bbox_mAP_l": 0.7454, "bbox_mAP_copypaste": "0.6544 0.7777 0.7324 0.0000 0.4540 0.7454", "segm_mAP": 0.6948, "segm_mAP_50": 0.8133, "segm_mAP_75": 0.7324, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4288, "segm_mAP_l": 0.8008, "segm_mAP_copypaste": "0.6948 0.8133 0.7324 0.0505 0.4288 0.8008"}
{"mode": "val", "epoch": 36, "iter": 13, "lr": 0.00057, "bbox_mAP": 0.6548, "bbox_mAP_50": 0.777, "bbox_mAP_75": 0.7318, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4534, "bbox_mAP_l": 0.7464, "bbox_mAP_copypaste": "0.6548 0.7770 0.7318 0.0000 0.4534 0.7464", "segm_mAP": 0.6969, "segm_mAP_50": 0.8122, "segm_mAP_75": 0.7499, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4302, "segm_mAP_l": 0.8024, "segm_mAP_copypaste": "0.6969 0.8122 0.7499 0.0505 0.4302 0.8024"}
{"mode": "val", "epoch": 37, "iter": 13, "lr": 0.00059, "bbox_mAP": 0.6555, "bbox_mAP_50": 0.778, "bbox_mAP_75": 0.7329, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4337, "bbox_mAP_l": 0.7498, "bbox_mAP_copypaste": "0.6555 0.7780 0.7329 0.0000 0.4337 0.7498", "segm_mAP": 0.6954, "segm_mAP_50": 0.8133, "segm_mAP_75": 0.7505, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4259, "segm_mAP_l": 0.8018, "segm_mAP_copypaste": "0.6954 0.8133 0.7505 0.0505 0.4259 0.8018"}
{"mode": "val", "epoch": 38, "iter": 13, "lr": 0.00061, "bbox_mAP": 0.6603, "bbox_mAP_50": 0.7776, "bbox_mAP_75": 0.7323, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4534, "bbox_mAP_l": 0.7546, "bbox_mAP_copypaste": "0.6603 0.7776 0.7323 0.0000 0.4534 0.7546", "segm_mAP": 0.6954, "segm_mAP_50": 0.8126, "segm_mAP_75": 0.7323, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4182, "segm_mAP_l": 0.8053, "segm_mAP_copypaste": "0.6954 0.8126 0.7323 0.0505 0.4182 0.8053"}
{"mode": "val", "epoch": 39, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.658, "bbox_mAP_50": 0.7755, "bbox_mAP_75": 0.7294, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4534, "bbox_mAP_l": 0.7531, "bbox_mAP_copypaste": "0.6580 0.7755 0.7294 0.0000 0.4534 0.7531", "segm_mAP": 0.696, "segm_mAP_50": 0.8109, "segm_mAP_75": 0.7294, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4238, "segm_mAP_l": 0.8069, "segm_mAP_copypaste": "0.6960 0.8109 0.7294 0.0505 0.4238 0.8069"}
{"mode": "val", "epoch": 40, "iter": 13, "lr": 0.00064, "bbox_mAP": 0.6597, "bbox_mAP_50": 0.7785, "bbox_mAP_75": 0.7325, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4451, "bbox_mAP_l": 0.7535, "bbox_mAP_copypaste": "0.6597 0.7785 0.7325 0.0000 0.4451 0.7535", "segm_mAP": 0.6984, "segm_mAP_50": 0.8134, "segm_mAP_75": 0.7325, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4276, "segm_mAP_l": 0.8068, "segm_mAP_copypaste": "0.6984 0.8134 0.7325 0.0505 0.4276 0.8068"}
{"mode": "val", "epoch": 41, "iter": 13, "lr": 0.00065, "bbox_mAP": 0.6489, "bbox_mAP_50": 0.7673, "bbox_mAP_75": 0.7259, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4155, "bbox_mAP_l": 0.75, "bbox_mAP_copypaste": "0.6489 0.7673 0.7259 0.0000 0.4155 0.7500", "segm_mAP": 0.6871, "segm_mAP_50": 0.802, "segm_mAP_75": 0.7339, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4045, "segm_mAP_l": 0.8014, "segm_mAP_copypaste": "0.6871 0.8020 0.7339 0.0505 0.4045 0.8014"}
{"mode": "val", "epoch": 42, "iter": 13, "lr": 0.00067, "bbox_mAP": 0.6531, "bbox_mAP_50": 0.7695, "bbox_mAP_75": 0.7274, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4443, "bbox_mAP_l": 0.7546, "bbox_mAP_copypaste": "0.6531 0.7695 0.7274 0.0000 0.4443 0.7546", "segm_mAP": 0.6836, "segm_mAP_50": 0.8038, "segm_mAP_75": 0.7274, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4018, "segm_mAP_l": 0.8007, "segm_mAP_copypaste": "0.6836 0.8038 0.7274 0.0505 0.4018 0.8007"}
{"mode": "val", "epoch": 43, "iter": 13, "lr": 0.00069, "bbox_mAP": 0.6526, "bbox_mAP_50": 0.7695, "bbox_mAP_75": 0.7277, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4386, "bbox_mAP_l": 0.7552, "bbox_mAP_copypaste": "0.6526 0.7695 0.7277 0.0000 0.4386 0.7552", "segm_mAP": 0.6889, "segm_mAP_50": 0.8039, "segm_mAP_75": 0.7277, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4031, "segm_mAP_l": 0.8062, "segm_mAP_copypaste": "0.6889 0.8039 0.7277 0.0505 0.4031 0.8062"}
{"mode": "val", "epoch": 44, "iter": 13, "lr": 0.0007, "bbox_mAP": 0.6538, "bbox_mAP_50": 0.7695, "bbox_mAP_75": 0.7271, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4458, "bbox_mAP_l": 0.7549, "bbox_mAP_copypaste": "0.6538 0.7695 0.7271 0.0000 0.4458 0.7549", "segm_mAP": 0.6879, "segm_mAP_50": 0.8045, "segm_mAP_75": 0.7271, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4021, "segm_mAP_l": 0.8059, "segm_mAP_copypaste": "0.6879 0.8045 0.7271 0.0505 0.4021 0.8059"}
{"mode": "val", "epoch": 45, "iter": 13, "lr": 0.00072, "bbox_mAP": 0.6516, "bbox_mAP_50": 0.7698, "bbox_mAP_75": 0.7269, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4376, "bbox_mAP_l": 0.7544, "bbox_mAP_copypaste": "0.6516 0.7698 0.7269 0.0000 0.4376 0.7544", "segm_mAP": 0.6922, "segm_mAP_50": 0.8049, "segm_mAP_75": 0.7269, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4063, "segm_mAP_l": 0.8094, "segm_mAP_copypaste": "0.6922 0.8049 0.7269 0.0505 0.4063 0.8094"}
{"mode": "val", "epoch": 46, "iter": 13, "lr": 0.00073, "bbox_mAP": 0.652, "bbox_mAP_50": 0.7708, "bbox_mAP_75": 0.7276, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4453, "bbox_mAP_l": 0.7529, "bbox_mAP_copypaste": "0.6520 0.7708 0.7276 0.0000 0.4453 0.7529", "segm_mAP": 0.6888, "segm_mAP_50": 0.8061, "segm_mAP_75": 0.7276, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4019, "segm_mAP_l": 0.8078, "segm_mAP_copypaste": "0.6888 0.8061 0.7276 0.0505 0.4019 0.8078"}
{"mode": "val", "epoch": 47, "iter": 13, "lr": 0.00075, "bbox_mAP": 0.654, "bbox_mAP_50": 0.776, "bbox_mAP_75": 0.7314, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4386, "bbox_mAP_l": 0.7551, "bbox_mAP_copypaste": "0.6540 0.7760 0.7314 0.0000 0.4386 0.7551", "segm_mAP": 0.6935, "segm_mAP_50": 0.8111, "segm_mAP_75": 0.7314, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.4019, "segm_mAP_l": 0.8116, "segm_mAP_copypaste": "0.6935 0.8111 0.7314 0.0505 0.4019 0.8116"}
{"mode": "val", "epoch": 48, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.6494, "bbox_mAP_50": 0.7729, "bbox_mAP_75": 0.7286, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3999, "bbox_mAP_l": 0.7567, "bbox_mAP_copypaste": "0.6494 0.7729 0.7286 0.0000 0.3999 0.7567", "segm_mAP": 0.69, "segm_mAP_50": 0.8081, "segm_mAP_75": 0.7286, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.3945, "segm_mAP_l": 0.8101, "segm_mAP_copypaste": "0.6900 0.8081 0.7286 0.0505 0.3945 0.8101"}
{"mode": "val", "epoch": 49, "iter": 13, "lr": 0.00078, "bbox_mAP": 0.6579, "bbox_mAP_50": 0.7794, "bbox_mAP_75": 0.7323, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.427, "bbox_mAP_l": 0.7622, "bbox_mAP_copypaste": "0.6579 0.7794 0.7323 0.0000 0.4270 0.7622", "segm_mAP": 0.6957, "segm_mAP_50": 0.8156, "segm_mAP_75": 0.7323, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.3945, "segm_mAP_l": 0.8152, "segm_mAP_copypaste": "0.6957 0.8156 0.7323 0.0505 0.3945 0.8152"}
{"mode": "val", "epoch": 50, "iter": 13, "lr": 0.0008, "bbox_mAP": 0.6544, "bbox_mAP_50": 0.7765, "bbox_mAP_75": 0.7326, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.42, "bbox_mAP_l": 0.7597, "bbox_mAP_copypaste": "0.6544 0.7765 0.7326 0.0000 0.4200 0.7597", "segm_mAP": 0.6932, "segm_mAP_50": 0.8126, "segm_mAP_75": 0.7326, "segm_mAP_s": 0.0505, "segm_mAP_m": 0.3957, "segm_mAP_l": 0.8138, "segm_mAP_copypaste": "0.6932 0.8126 0.7326 0.0505 0.3957 0.8138"}
