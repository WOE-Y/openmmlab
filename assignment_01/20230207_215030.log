2023-02-07 21:50:30,714 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.8 (default, Feb 24 2021, 21:46:12) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA GeForce RTX 3090
CUDA_HOME: /home/yangziqi/.conda/envs/openmmlab
NVCC: Cuda compilation tools, release 11.6, V11.6.124
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.13.1
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-07 21:50:30,714 - mmcls - INFO - Distributed training: False
2023-02-07 21:50:30,883 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=64,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_dataset/train.txt',
        classes='data/flower_dataset/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower_dataset/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b64_flower'
gpu_ids = [0]

2023-02-07 21:50:30,883 - mmcls - INFO - Set random seed to 1137067690, deterministic: False
2023-02-07 21:50:31,032 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-07 21:50:31,134 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-07 21:50:33,033 - mmcls - INFO - load checkpoint from local path: checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-07 21:50:33,080 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-07 21:50:33,082 - mmcls - INFO - Start running, host: yangziqi@work, work_dir: /data/yangziqi/openmmlab/mmclassification/work/resnet18_b64_flower
2023-02-07 21:50:33,082 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-07 21:50:33,083 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-07 21:50:33,083 - mmcls - INFO - Checkpoints will be saved to /data/yangziqi/openmmlab/mmclassification/work/resnet18_b64_flower by HardDiskBackend.
2023-02-07 21:50:43,517 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-07 21:50:45,306 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 88.6364, accuracy_top-5: 100.0000
2023-02-07 21:50:52,218 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-07 21:50:53,902 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 90.3846, accuracy_top-5: 100.0000
2023-02-07 21:51:00,810 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-07 21:51:02,449 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 90.5594, accuracy_top-5: 100.0000
2023-02-07 21:51:09,336 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-07 21:51:11,019 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-07 21:51:17,855 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-07 21:51:19,518 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 91.6084, accuracy_top-5: 100.0000
2023-02-07 21:51:26,421 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-07 21:51:28,100 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-07 21:51:34,899 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-07 21:51:36,554 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 91.6084, accuracy_top-5: 100.0000
2023-02-07 21:51:43,425 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-07 21:51:45,092 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-07 21:51:51,932 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-07 21:51:53,568 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 92.1329, accuracy_top-5: 100.0000
2023-02-07 21:52:00,341 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-07 21:52:02,016 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 91.7832, accuracy_top-5: 100.0000
2023-02-07 21:52:08,853 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-07 21:52:10,514 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-07 21:52:17,401 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-07 21:52:19,060 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-07 21:52:25,866 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-07 21:52:27,540 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-07 21:52:34,360 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-07 21:52:36,019 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-07 21:52:42,868 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-07 21:52:44,531 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-07 21:52:51,498 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-07 21:52:53,154 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-07 21:53:00,191 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-07 21:53:01,853 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-07 21:53:08,848 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-07 21:53:10,514 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-07 21:53:17,343 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-07 21:53:18,999 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-07 21:53:25,857 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-07 21:53:27,506 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-07 21:53:34,369 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-07 21:53:36,023 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-07 21:53:42,862 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-07 21:53:44,514 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-07 21:53:51,328 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-07 21:53:53,002 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-07 21:53:59,839 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-07 21:54:01,491 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-07 21:54:08,294 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-07 21:54:09,974 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-07 21:54:16,806 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-07 21:54:18,453 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-07 21:54:25,253 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-07 21:54:26,902 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-07 21:54:33,717 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-07 21:54:35,360 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:54:42,166 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-07 21:54:43,820 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 21:54:50,674 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-07 21:54:52,336 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-07 21:54:59,125 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-07 21:55:00,776 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-07 21:55:07,608 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-07 21:55:09,260 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:55:16,113 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-07 21:55:17,762 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-07 21:55:24,555 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-07 21:55:26,206 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:55:33,032 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-07 21:55:34,682 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:55:41,509 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-07 21:55:43,156 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-07 21:55:49,973 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-07 21:55:51,624 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 21:55:58,485 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-07 21:56:00,137 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:56:06,935 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-07 21:56:08,591 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 21:56:15,437 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-07 21:56:17,100 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-07 21:56:23,996 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-07 21:56:25,647 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 21:56:32,438 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-07 21:56:34,090 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:56:40,932 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-07 21:56:42,585 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:56:49,407 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-07 21:56:51,063 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:56:57,904 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-07 21:56:59,555 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:57:06,427 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-07 21:57:08,077 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:57:14,955 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-07 21:57:16,608 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:57:23,445 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-07 21:57:25,100 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:57:31,940 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-07 21:57:33,592 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:57:40,398 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-07 21:57:42,054 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 21:57:48,917 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-07 21:57:50,573 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 21:57:57,363 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-07 21:57:59,032 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:58:05,852 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-07 21:58:07,504 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:58:14,289 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-07 21:58:15,942 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 21:58:22,730 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-07 21:58:24,382 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:58:31,238 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-07 21:58:32,887 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 21:58:39,752 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-07 21:58:41,423 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 21:58:48,213 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-07 21:58:49,874 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-07 21:58:56,676 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-07 21:58:58,338 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-07 21:59:05,134 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-07 21:59:06,795 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 21:59:13,689 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-07 21:59:15,350 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:59:22,222 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-07 21:59:23,887 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:59:30,730 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-07 21:59:32,392 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 21:59:39,182 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-07 21:59:40,844 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 21:59:47,687 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-07 21:59:49,350 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 21:59:56,212 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-07 21:59:57,871 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 22:00:04,697 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-07 22:00:06,373 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 22:00:13,200 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-07 22:00:14,864 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-07 22:00:21,737 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-07 22:00:23,403 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:00:30,209 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-07 22:00:31,871 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:00:38,695 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-07 22:00:40,359 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-07 22:00:47,153 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-07 22:00:48,814 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 22:00:55,689 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-07 22:00:57,353 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:01:04,189 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-07 22:01:05,850 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-07 22:01:12,703 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-07 22:01:14,359 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 22:01:21,177 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-07 22:01:22,828 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 22:01:29,656 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-07 22:01:31,308 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:01:38,116 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-07 22:01:39,768 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 22:01:46,599 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-07 22:01:48,251 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:01:55,088 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-07 22:01:56,738 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:02:03,580 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-07 22:02:05,232 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 22:02:12,052 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-07 22:02:13,711 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 22:02:20,580 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-07 22:02:22,232 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:02:29,013 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-07 22:02:30,663 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 22:02:37,499 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-07 22:02:39,168 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:02:45,958 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-07 22:02:47,603 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:02:54,416 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-07 22:02:56,085 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:03:02,906 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-07 22:03:04,563 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 22:03:11,362 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-07 22:03:13,020 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:03:19,807 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-07 22:03:21,470 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-07 22:03:28,352 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-07 22:03:30,009 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:03:36,812 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-07 22:03:38,479 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-07 22:03:45,286 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-07 22:03:46,948 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:03:53,762 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-07 22:03:55,426 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:04:02,261 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-07 22:04:03,923 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:04:10,719 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-07 22:04:12,380 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:04:19,171 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-07 22:04:20,835 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:04:27,672 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-07 22:04:29,335 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-07 22:04:36,165 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-07 22:04:37,830 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-07 22:04:44,630 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-07 22:04:46,293 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
